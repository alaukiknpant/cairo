//! > Test +=, -=, *=, /=, %=

//! > test_runner_name
test_partial_parser_tree

//! > cairo_code
fn foo() {
    let mut x = 3;
    x += 5;
    x -= 5;
    x *= 5;
    x /= 5;
    x %= 5;
    x = 5;
}

//! > top_level_kind
StatementList

//! > ignored_kinds
StatementLet

//! > expected_diagnostics
error: Skipped tokens. Expected: statement.
 --> dummy_file.cairo:3:7
    x += 5;
      ^^

error: Skipped tokens. Expected: statement.
 --> dummy_file.cairo:4:7
    x -= 5;
      ^^

error: Skipped tokens. Expected: statement.
 --> dummy_file.cairo:5:7
    x *= 5;
      ^^

error: Skipped tokens. Expected: statement.
 --> dummy_file.cairo:6:7
    x /= 5;
      ^^

error: Skipped tokens. Expected: statement.
 --> dummy_file.cairo:7:7
    x %= 5;
      ^^

error: Skipped tokens. Expected: statement.
 --> dummy_file.cairo:8:7
    x = 5;
      ^

//! > expected_tree
└── Top level kind: StatementList
    ├── child #0 (kind: StatementLet) <ignored>
    ├── child #1 (kind: StatementExpr)
    │   ├── expr (kind: ExprPath)
    │   │   └── item #0 (kind: PathSegmentSimple)
    │   │       └── ident (kind: TokenIdentifier): 'x'
    │   └── semicolon (kind: OptionTerminalSemicolonEmpty) []
    ├── child #2 (kind: StatementExpr)
    │   ├── expr (kind: TokenLiteralNumber): '5'
    │   └── semicolon (kind: TokenSemicolon): ';'
    ├── child #3 (kind: StatementExpr)
    │   ├── expr (kind: ExprPath)
    │   │   └── item #0 (kind: PathSegmentSimple)
    │   │       └── ident (kind: TokenIdentifier): 'x'
    │   └── semicolon (kind: OptionTerminalSemicolonEmpty) []
    ├── child #4 (kind: StatementExpr)
    │   ├── expr (kind: TokenLiteralNumber): '5'
    │   └── semicolon (kind: TokenSemicolon): ';'
    ├── child #5 (kind: StatementExpr)
    │   ├── expr (kind: ExprPath)
    │   │   └── item #0 (kind: PathSegmentSimple)
    │   │       └── ident (kind: TokenIdentifier): 'x'
    │   └── semicolon (kind: OptionTerminalSemicolonEmpty) []
    ├── child #6 (kind: StatementExpr)
    │   ├── expr (kind: TokenLiteralNumber): '5'
    │   └── semicolon (kind: TokenSemicolon): ';'
    ├── child #7 (kind: StatementExpr)
    │   ├── expr (kind: ExprPath)
    │   │   └── item #0 (kind: PathSegmentSimple)
    │   │       └── ident (kind: TokenIdentifier): 'x'
    │   └── semicolon (kind: OptionTerminalSemicolonEmpty) []
    ├── child #8 (kind: StatementExpr)
    │   ├── expr (kind: TokenLiteralNumber): '5'
    │   └── semicolon (kind: TokenSemicolon): ';'
    ├── child #9 (kind: StatementExpr)
    │   ├── expr (kind: ExprPath)
    │   │   └── item #0 (kind: PathSegmentSimple)
    │   │       └── ident (kind: TokenIdentifier): 'x'
    │   └── semicolon (kind: OptionTerminalSemicolonEmpty) []
    ├── child #10 (kind: StatementExpr)
    │   ├── expr (kind: TokenLiteralNumber): '5'
    │   └── semicolon (kind: TokenSemicolon): ';'
    ├── child #11 (kind: StatementExpr)
    │   ├── expr (kind: ExprPath)
    │   │   └── item #0 (kind: PathSegmentSimple)
    │   │       └── ident (kind: TokenIdentifier): 'x'
    │   └── semicolon (kind: OptionTerminalSemicolonEmpty) []
    └── child #12 (kind: StatementExpr)
        ├── expr (kind: TokenLiteralNumber): '5'
        └── semicolon (kind: TokenSemicolon): ';'

//! > ==========================================================================

//! > Test error of `+=` with `let`.

//! > test_runner_name
test_partial_parser_tree

//! > cairo_code
fn foo() {
    let x += 5;
}

//! > top_level_kind
StatementList

//! > ignored_kinds

//! > expected_diagnostics
error: Missing token TerminalEq.
 --> dummy_file.cairo:2:10
    let x += 5;
         ^

error: Missing tokens. Expected an expression.
 --> dummy_file.cairo:2:10
    let x += 5;
         ^

error: Missing token TerminalSemicolon.
 --> dummy_file.cairo:2:10
    let x += 5;
         ^

error: Skipped tokens. Expected: statement.
 --> dummy_file.cairo:2:11
    let x += 5;
          ^^

//! > expected_tree
└── Top level kind: StatementList
    ├── child #0 (kind: StatementLet)
    │   ├── let_kw (kind: TokenLet): 'let'
    │   ├── pattern (kind: ExprPath)
    │   │   └── item #0 (kind: PathSegmentSimple)
    │   │       └── ident (kind: TokenIdentifier): 'x'
    │   ├── type_clause (kind: OptionTypeClauseEmpty) []
    │   ├── eq: Missing
    │   ├── rhs: Missing []
    │   └── semicolon: Missing
    └── child #1 (kind: StatementExpr)
        ├── expr (kind: TokenLiteralNumber): '5'
        └── semicolon (kind: TokenSemicolon): ';'
